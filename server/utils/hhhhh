const uuid = () => {
    return Math.floor((1 + Math.random()) * 0x10000)
      .toString(16)
      .substring(1);
  }

  module.exports = uuid

  resolvers,
  context: authMiddleware,
});

const app = express();

app.use(express.urlencoded({ extended: false }));
app.use(express.json());

// Serve up static assets
//app.use('/images', express.static(path.join(__dirname, '../client/images')));
//
//if (process.env.NODE_ENV === 'production') {
//	app.use(express.static(path.join(__dirname, '../client/build')));
//}
//
//app.get('*', (req, res) => {
//	res.sendFile(path.join(__dirname, '../client/build/index.html'));
//});

// Create a new instance of an Apollo server with the GraphQL schema
const startApolloServer = async (typeDefs, resolvers) => {
  await server.start();
  server.applyMiddleware({ app }); 
  db.sync({ force: false }).then(() => {
    app.listen(PORT, () => {
      console.log(`API server running on port ${PORT}!`);
      console.log(`Use GraphQL at http://localhost:${PORT}${server.graphqlPath}`);
    })
  })